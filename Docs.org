#+TITLE: formula docs
#STATUS: DRAFT

*formula* is a JavaScript library written in ES6.

It includes ES5 code precompiled with babel in the lib folder.

If you want to load the entire library (72kb) then use functionfoundry.js in the dist folder. This file is generated with browserify.

The library includes functions for:

  + [[#abs][ABS]]
  + [[#acos][ACOS]]
  + [[#add][ADD]]
  + [[#and][AND]]
  + [[#bin2dec][BIN2DEC]]
  + [[#cell][CELL]]
  + [[#cellindex][CELLINDEX]]
  + [[#changed][CHANGED]]
  + [[#choose][CHOOSE]]
  + [[#clean][CLEAN]]
  + [[#concatenate][CONCATENATE]]
  + [[#cond][COND]]
  + [[#cos][COS]]
  + [[#date][DATE]]
  + [[#datedif][DATEDIF]]
  + [[#dec2bin][DEC2BIN]]
  + [[#diff][DIFF]]
  + [[#divide][DIVIDE]]
  + [[#eq][EQ]]
  + [[#filter][FILTER]]
  + [[#find][FIND]]
  + [[#flatten][FLATTEN]]
  + [[#gt][GT]]
  + [[#gte][GTE]]
  + [[#guid][GUID]]
  + [[#hlookup][HLOOKUP]]
  + [[#ifna][IFNA]]
  + [[#in][IN]]
  + [[#index2col][INDEX2COL]]
  + [[#index2row][INDEX2ROW]]
  + [[#indirect][INDIRECT]]
  + [[#isarray][ISARRAY]]
  + [[#isblank][ISBLANK]]
  + [[#isemail][ISEMAIL]]
  + [[#iserror][ISERROR]]
  + [[#iseven][ISEVEN]]
  + [[#isfunction][ISFUNCTION]]
  + [[#isna][ISNA]]
  + [[#isnumber][ISNUMBER]]
  + [[#isodd][ISODD]]
  + [[#isrange][ISRANGE]]
  + [[#isref][ISREF]]
  + [[#istext][ISTEXT]]
  + [[#isurl][ISURL]]
  + [[#lookup][LOOKUP]]
  + [[#lower][LOWER]]
  + [[#lt][LT]]
  + [[#lte][LTE]]
  + [[#max][MAX]]
  + [[#multiply][MULTIPLY]]
  + [[#n][N]]
  + [[#ne][NE]]
  + [[#not][NOT]]
  + [[#oct2dec][OCT2DEC]]
  + [[#or][OR]]
  + [[#pi][PI]]
  + [[#pmt][PMT]]
  + [[#power][POWER]]
  + [[#range][RANGE]]
  + [[#rept][REPT]]
  + [[#search][SEARCH]]
  + [[#sin][SIN]]
  + [[#sort][SORT]]
  + [[#sum][SUM]]
  + [[#switch][SWITCH]]
  + [[#tan][TAN]]
  + [[#tau][TAU]]
  + [[#text][TEXT]]
  + [[#unique][UNIQUE]]
  + [[#upper][UPPER]]
  + [[#vlookup][VLOOKUP]]

* AND

  Returns TRUE if all arguments evaluate to TRUE; otherwise returns FALSE.

  #+BEGIN_EXAMPLE
   AND(TRUE, FALSE) = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  AND(1, TRUE) = TRUE
  #+END_EXAMPLE

* CHOOSE

  Choose a value from a list.

  #+BEGIN_EXAMPLE
  CHOOSE(2, "Hello", "World") = "World"
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  CHOOSE(3, "One", "Two", "Three") = "Three"
  #+END_EXAMPLE

* ABS

Return the absolute value.

* ACOS

Return the trigometric value _acos_ of some value.

* ADD

Add one or more values with the JavaScript `+` operator.

* BIN2DEC

Convert a binary number to a decimal number.

* CELL

Returns an object that tracks a cell index and provides helper functions for:

1. getColumn() -> computes column
2. getRow() -> computes row
3. topLeft() -> return index supplied as input

* CELLINDEX

Returns a cell index given a row and column.

* CHANGED

Returns a list of fields that have changed between two JS objects.

#+BEGIN_SRC js
  let a = { a: 1, b: 2 },
      b = { a: 2, b: 2 },
      changed = CHANGED(a,b) // => ['a]
#+END_SRC

* CHOOSE

Choose a value from a range based on an index.

#+BEGIN_SRC js
  CHOOSE( 1, 'a', 'b', 'c' ) // => 'a'
  CHOOSE( 2, 'a', 'b', 'c' ) // => 'b'
  CHOOSE( 3, 'a', 'b', 'c' ) // => 'c'
#+END_SRC

* CLEAN

Return a new object that eliminates blank keys.

#+BEGIN_SRC js
  CLEAN({ a: null, b: undefined, c: 'some value' }) // => { c: 'some value' }
#+END_SRC

* CONCATENATE

Combine two strings.

* COND

Evaluate a condition table. The even value after the first true value is returned.

#+BEGIN_SRC js
  COND( true, 1, true, 2) // => 1
  COND( false, 1, true, 2) // => 2
#+END_SRC

* COS

Return the trigometric value _acos_ of some value.

* DATE
    Returns a serial number that represents a date given a year, month and day.

*** Syntax
    DATE(year, month, day)
*** Examples

    #+BEGIN_EXAMPLE
     DATE( 2014, 01, 01 ) = 41640
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
     DATE( 2015, 3, 4 ) = 42067
    #+END_EXAMPLE

* DATEDIF
  Calculates the number of days, months or years between two date.
** Syntax

  DATEDIF(start_date, end_date, unit)

  Arguments:

  | start_date | The beginning of a period. Dates may be entered as text string, serial number or result of function (e.g. DATEVALUE("2015-01-01") |
  | end_date   | The end of a period.                                                                                                              |
  | unit       | The type of information you want to calculate.                                                                                    |

  Unit Types:

  | "Y"  | The number of complete years in the period                                                      |
  | "M"  | The number of complete months in the period                                                     |
  | "D"  | The number of days in the period                                                                |
  | "MD" | The difference between the days in the start_date and end_date. The month and year are ignored  |
  | "YM" | The difference between the months in the start_date and end_date. The days and year are ignored |
  | "YD" | The difference between the days in the start_date and end_date. The years are ignored           |

** Examples

   #+BEGIN_EXAMPLE
     DATEDIF(DATE(2015, 1, 15), DATE(2015, 1, 16), "D") = 1
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     DATEDIF("1/15/2015", "1/16/2015", "D") = 1
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     DATEDIF("1/15/2014", "1/16/2015", "Y") = 1
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     DATEDIF("12/15/2014", "1/16/2015", "M") = 1
   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     DATEDIF("10/01/2014", "1/31/2015", "M") = 3
   #+END_EXAMPLE

* IF

  Returns true_value if a condition you specify evaluates to TRUE and false_value if it evaluates to FALSE.

  #+BEGIN_EXAMPLE
  IF(1,"Yes", "No") = "Yes"
  #+END_EXAMPLE

* IFNA

  Returns the value you specify if the formula returns the #N/A error value; otherwise returns the result of the formula.

  #+BEGIN_EXAMPLE
  =IFNA(NA(), TRUE, FALSE)
  #+END_EXAMPLE

* IFERROR

  Returns a value you specify if a formula evaluates to an error; otherwise,
  returns the result of the formula.

  #+BEGIN_EXAMPLE
  IFERROR(1/0, "Error") = "Error"
  #+END_EXAMPLE

* INDIRECT
* ISARRAY

  Tests if the value is an array.

  #+BEGIN_EXAMPLE
  ISARRAY({1,2,3}) = true
  #+END_EXAMPLE

* ISBLANK

  Tests if the value is blank (empty).

  #+BEGIN_EXAMPLE
  ISBLANK("FOO") = false
  ISBLANK(null) = true
  #+END_EXAMPLE

* ISEMAIL
* ISERR

  Test for any error but #N/A.

* ISFORMULA

  Test if cell has formula.

* ISLOGICAL

  Test for TRUE or FALSE

  #+BEGIN_EXAMPLE
  ISLOGICAL(1) = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISLOGICAL("HELLO") = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISLOGICAL(TRUE) = TRUE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISLOGICAL(FALSE) = TRUE
  #+END_EXAMPLE

* ISNA

  Test for NA error.

  #+BEGIN_EXAMPLE
  ISNA("foo") = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISNA(NA()) = TRUE
  #+END_EXAMPLE

* ISNONTEXT

  Test for non text

  #+BEGIN_EXAMPLE
  ISNONTEXT("foo") = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISNONTEXT(NA()) = TRUE
  #+END_EXAMPLE

* ISNUMBER

  Returns TRUE if the *value_to_check* is a number.

  #+BEGIN_EXAMPLE
  ISNUMBER("FOO") = FALSE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISNUMBER(1)
  #+END_EXAMPLE

* ISODD

  Returns true if the value is odd.

  #+BEGIN_EXAMPLE
  ISODD(1) = TRUE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISODD(2) = FALSE
  #+END_EXAMPLE

* ISTEXT

  Returns TRUE if the value is text.

  #+BEGIN_EXAMPLE
  ISTEXT("foo") = TRUE
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  ISTEXT(2) = FALSE
  #+END_EXAMPLE

* ISRANGE

  Return TRUE when the value is a range or a cell reference.

* ISREF

   Return TRUE when the value is a range or a cell reference.

* NOT

  Returns TRUE when FALSE and FALSE when TRUE;

  #+BEGIN_EXAMPLE
  NOT(FALSE)
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  NOT(TRUE) = FALSE
  #+END_EXAMPLE

* OR


  Returns TRUE if any argument is true.

  #+BEGIN_EXAMPLE
  OR(TRUE, FALSE)
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  OR(FALSE, FALSE) = FALSE
  #+END_EXAMPLE

* RANGE

  Accepts a topLeft and bottomRight index and returns a frozen range object.

* PI

  Returns the value for the univeral constant PI.

  #+BEGIN_EXAMPLE
  PI() = 3.141592653589793
  #+END_EXAMPLE

* POWER

  Returns the the nth power of a number.

  #+BEGIN_EXAMPLE
    POWER(16, 2) = 256
  #+END_EXAMPLE

* SWITCH

  Evaluates an expression against a list of values and returns the matching result.

  #+BEGIN_EXAMPLE
  SWITCH(1, 1, "January", 2, "February", 3,
  "March", 4, "April", 5, "May", 6, "June", 7, "July", 8,
  "August", 9, "September", 10, "October", 11, "November", 12,
  "December", "Unknown month number") = "January"
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  SWITCH(1, 1, "Good", 2, "OK", 3, "Bad") = "Good"
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
  SWITCH(3, 1, "Good", 2, "OK", 3, "Bad") = "Bad"
  #+END_EXAMPLE

* XOR

   Returns the exclusive OR for argument1, argument2...argumentN.

   #+BEGIN_EXAMPLE
    XOR(0, 1, 0) = TRUE
   #+END_EXAMPLE
